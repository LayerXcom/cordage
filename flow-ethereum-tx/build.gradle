buildscript {
    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        corda_minimum_platform_version = constants.getProperty("minimumPlatformVersion").toInteger()
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

apply from: "${rootProject.projectDir}/../repositories.gradle"

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    signing {
        enabled false
    }
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_minimum_platform_version
    workflow {
        name "Ethereum Tx"
        vendor "LayerX Inc"
        licence "Apache 2.0"
        versionId 1
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.assertj:assertj-core:3.15.0"

    // web3j version should strictly equal to 4.5.11 due to its okhttp dependency conflict
    // https://github.com/web3j/web3j/issues/1167#issuecomment-593369842
    compile "org.web3j:core:4.5.11"

    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    testImplementation "$corda_release_group:corda-test-utils:$corda_release_version"
    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    cordaCompile "org.apache.logging.log4j:log4j-web:$log4j_version"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    def nodesDir = "./build/nodes"
    delete nodesDir
    directory nodesDir

    signing {
        enabled false
    }

    nodeDefaults {
        rpcUsers = [[ user: "user1", "password": "password", "permissions": ["ALL"]]]
    }

    node {
        name "O=ParticipantA,L=London,C=GB"
        p2pPort 10007
        rpcSettings {
            useSsl false
            standAloneBroker false
            address "0.0.0.0:10008"
            adminAddress "0.0.0.0:10108"
        }
    }
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}
